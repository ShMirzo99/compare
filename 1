import random
import copy

# Настройки
NUM_TASKS = 20
NUM_ITERATIONS = 10
QUANTUM = 2
CONTEXT_SWITCH = 0.5

# Генерация задач
def generate_tasks(n=NUM_TASKS, min_time=1, max_time=10):
    return [{
        'id': i,
        'duration': random.randint(min_time, max_time),
        'deadline': random.randint(15, 50),
        'priority': random.randint(1, 5)
    } for i in range(n)]

# Общая симуляция
def simulate_execution(tasks):
    time = 0
    wait_times = []
    turnaround_times = []
    for task in tasks:
        wait_times.append(time)
        time += task['duration']
        turnaround_times.append(time)
    avg_wait = sum(wait_times) / len(tasks)
    avg_turn = sum(turnaround_times) / len(tasks)
    cpu_util = sum([t['duration'] for t in tasks]) / time
    return time, avg_wait, avg_turn, cpu_util

# FIFO
def fifo_scheduler(tasks):
    return simulate_execution(sorted(tasks, key=lambda t: t['id']))

# RR
def round_robin_scheduler(tasks, quantum=QUANTUM, context_switch=CONTEXT_SWITCH):
    time = 0
    queue = copy.deepcopy(tasks)
    remaining = [t['duration'] for t in queue]
    wait_time = [0] * len(queue)
    turnaround = [0] * len(queue)
    last_execution = [0] * len(queue)
    completed = [False] * len(queue)

    while not all(completed):
        for i in range(len(queue)):
            if remaining[i] > 0:
                wait_time[i] += time - last_execution[i]
                exec_time = min(quantum, remaining[i])
                time += exec_time
                remaining[i] -= exec_time
                last_execution[i] = time
                if remaining[i] == 0:
                    turnaround[i] = time
                    completed[i] = True
                time += context_switch
    avg_wait = sum(wait_time) / len(queue)
    avg_turn = sum(turnaround) / len(queue)
    total_task_time = sum([t['duration'] for t in queue])
    cpu_util = total_task_time / time
    return time, avg_wait, avg_turn, cpu_util

# SJF
def sjf_scheduler(tasks):
    return simulate_execution(sorted(tasks, key=lambda t: t['duration']))

# Priority
def priority_scheduler(tasks):
    return simulate_execution(sorted(tasks, key=lambda t: t['priority']))

# EDF
def edf_scheduler(tasks):
    return simulate_execution(sorted(tasks, key=lambda t: t['deadline']))

# Hybrid (ABC) — выбирает лучшую стратегию на основе "нектара"
def nectar(score):
    makespan, wait, turn, cpu = score
    return 1 / (wait + 0.1) + cpu  # можно усложнить при желании

def abc_hybrid_scheduler(tasks):
    strategies = {
        'FIFO': fifo_scheduler,
        'RR': round_robin_scheduler,
        'SJF': sjf_scheduler,
        'PRIO': priority_scheduler,
        'EDF': edf_scheduler
    }

    scores = {}
    nects = {}
    for name, func in strategies.items():
        score = func(copy.deepcopy(tasks))
        scores[name] = score
        nects[name] = nectar(score)

    total_nectar = sum(nects.values())
    probs = {name: nects[name]/total_nectar for name in nects}
    chosen = random.choices(list(probs.keys()), weights=probs.values(), k=1)[0]
    return scores[chosen], chosen

# Словарь для всех методов
methods = {
    'FIFO': fifo_scheduler,
    'RR': round_robin_scheduler,
    'SJF': sjf_scheduler,
    'PRIO': priority_scheduler,
    'EDF': edf_scheduler,
    'ABC': abc_hybrid_scheduler
}

# Инициализация результатов
results = {name: [] for name in methods}

# Главный цикл
for i in range(NUM_ITERATIONS):
    tasks = generate_tasks()
    print(f"\n=== ИТЕРАЦИЯ {i+1} ===")

    for name, func in methods.items():
        if name == 'ABC':
            score, chosen = func(copy.deepcopy(tasks))
            print(f"{name}: Ожидание={score[1]:.2f}, CPU={score[3]*100:.1f}% (выбрана: {chosen})")
        else:
            score = func(copy.deepcopy(tasks))
            print(f"{name}: Ожидание={score[1]:.2f}, CPU={score[3]*100:.1f}%")
        results[name].append(score)

# Подсчёт средних
def avg(scores):
    return [sum(m[i] for m in scores)/len(scores) for i in range(4)]

print("\n=== СРЕДНИЕ РЕЗУЛЬТАТЫ ===")
for name in methods:
    a = avg(results[name])
    print(f"{name}: Время={a[0]:.1f}, Ожидание={a[1]:.2f}, Обработка={a[2]:.2f}, CPU={a[3]*100:.1f}%")
